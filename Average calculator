from flask import Flask, jsonify
import time
import random
from collections import deque

app = Flask(__name__)

# Simulate a test server fetching function
def fetch_numbers_from_test_server(number_type):
    # Simulate delay
    time.sleep(random.uniform(0, 0.5))
    # Simulate fetching different types of numbers
    if number_type == 'p':
        return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]
    elif number_type == 'f':
        return [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]
    elif number_type == 'e':
        return [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]
    elif number_type == 'r':
        return [random.randint(1, 100) for _ in range(10)]
    else:
        return []

# Configure window size
WINDOW_SIZE = 10
number_storage = deque(maxlen=WINDOW_SIZE)

@app.route('/numbers/<string:number_id>', methods=['GET'])
def get_numbers(number_id):
    start_time = time.time()
    
    try:
        numbers = fetch_numbers_from_test_server(number_id)
        if time.time() - start_time > 0.5:
            raise TimeoutError
    except (TimeoutError, Exception) as e:
        return jsonify({"error": "Request to test server timed out or failed"}), 500

    # Ensure unique numbers
    unique_numbers = list(set(numbers))
    
    # Get previous state
    previous_state = list(number_storage)
    
    # Update the storage
    for number in unique_numbers:
        number_storage.append(number)
    
    # Current state
    current_state = list(number_storage)
    
    # Calculate the average
    if current_state:
        average = sum(current_state) / len(current_state)
    else:
        average = 0
    
    response = {
        "received_numbers": unique_numbers,
        "previous_window_state": previous_state,
        "current_window_state": current_state,
        "average": average
    }
    
    # Ensure response within 500 ms
    if time.time() - start_time > 0.5:
        return jsonify({"error": "Response took too long"}), 500
    
    return jsonify(response), 200

if __name__ == '__main__':
    app.run(debug=True, use_reloader=False)
