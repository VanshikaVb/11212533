from flask import Flask, request, jsonify
import requests
from functools import lru_cache

app = Flask(__name__)

# Replace these with actual values for the test server
TEST_SERVER_URL = "https://testserver.com"
API_KEY = "your_api_key_here"

# Register with the test server API to gain access to all companies
def register_with_test_server():
    url = f"{TEST_SERVER_URL}/register"
    response = requests.post(url, json={"api_key": API_KEY})
    if response.status_code == 200:
        print("Successfully registered with the test server.")
    else:
        print("Failed to register with the test server.", response.text)

register_with_test_server()
from flask_caching import Cache

# Configure caching
cache = Cache(app, config={'CACHE_TYPE': 'simple'})

@cache.memoize(timeout=300)
def fetch_products(category_name, company):
    url = f"{TEST_SERVER_URL}/products"
    params = {
        "category": category_name,
        "company": company,
        "api_key": API_KEY
    }
    response = requests.get(url, params=params)
    if response.status_code == 200:
        return response.json()
    else:
        return []

def get_all_products(category_name):
    companies = ['company1', 'company2', 'company3', 'company4', 'company5']
    all_products = []
    for company in companies:
        products = fetch_products(category_name, company)
        all_products.extend(products)
    return all_products
@app.route('/categories/<string:categoryname>/products', methods=['GET'])
def get_top_products(categoryname):
    n = int(request.args.get('n', 10))
    sort_by = request.args.get('sort_by', 'rating')
    sort_order = request.args.get('sort_order', 'desc')

    all_products = get_all_products(categoryname)
    sorted_products = sorted(all_products, key=lambda x: x.get(sort_by, 0), reverse=(sort_order == 'desc'))
    top_products = sorted_products[:n]

    return jsonify(top_products)

@app.route('/categories/<string:categoryname>/products/<string:productid>', methods=['GET'])
def get_product_details(categoryname, productid):
    all_products = get_all_products(categoryname)
    product = next((p for p in all_products if p['id'] == productid), None)
    if product:
        return jsonify(product)
    else:
        return jsonify({"error": "Product not found"}), 404

if __name__ == '__main__':
    app.run(debug=True)
@app.route('/categories/<string:categoryname>/products', methods=['GET'])
def get_top_products(categoryname):
    n = int(request.args.get('n', 10))
    sort_by = request.args.get('sort_by', 'rating')
    sort_order = request.args.get('sort_order', 'desc')

    all_products = get_all_products(categoryname)
    if sort_by in ['rating', 'price', 'discount']:
        sorted_products = sorted(all_products, key=lambda x: x.get(sort_by, 0), reverse=(sort_order == 'desc'))
    elif sort_by == 'company':
        sorted_products = sorted(all_products, key=lambda x: x.get('company', ''), reverse=(sort_order == 'desc'))
    else:
        sorted_products = all_products

    top_products = sorted_products[:n]

    return jsonify(top_products)
